package com.ff.auction.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.springframework.lang.NonNull;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.ff.auction.dto.CreateAuctionDto;

@DynamoDBTable(tableName = "AuctionLeague")
public class AuctionLeague implements Serializable {

	private static final long serialVersionUID = 1L;

	private String leagueId;
	private String leagueName;
	private String draftTurn = "1";
	private String draftRound = "1";
	private String ppr;
	private String maxPlayers;
	private String totalBudget = "0";
	private String status;
	private String leagueType = "Auction";
	private String currentBid = "";
	private String currentBidder = "";
	private String currentPlayer = "";
	private String currentPlayerPosition = "";
	private String currentPlayerTeam = "";

	private List<AuctionTeam> auctionTeams = new ArrayList<AuctionTeam>();

	public AuctionLeague() {
	}

	public AuctionLeague(CreateAuctionDto createAuctionDto) {
		this.leagueName = createAuctionDto.getLeagueName();
		this.ppr = createAuctionDto.getPpr();
		this.totalBudget = createAuctionDto.getBudget();
		this.maxPlayers = createAuctionDto.getMaxPlayers();
		this.currentPlayerPosition = createAuctionDto.getPosition();
		this.currentPlayerTeam = createAuctionDto.getTeam();
		this.status = "Created";
	}

	// Getters
	@NonNull
	@DynamoDBHashKey
	@DynamoDBAutoGeneratedKey
	public String getLeagueId() {
		return leagueId;
	}
	@DynamoDBAttribute
	public String getCurrentPlayer() {
		return this.currentPlayer;
	}
	@DynamoDBAttribute
	public String getLeagueName() {
		return this.leagueName;
	}
	@DynamoDBAttribute
	public String getCurrentPlayerPosition() {
		return this.currentPlayerPosition;
	}
	@DynamoDBAttribute
	public String getCurrentPlayerTeam() {
		return this.currentPlayerTeam;
	}
	@DynamoDBAttribute
	public String getPpr() {
		return this.ppr;
	}

	@DynamoDBAttribute
	public String getTotalBudget() {
		return this.totalBudget;
	}

	@DynamoDBAttribute
	public String getMaxPlayers() {
		return this.maxPlayers;
	}

	@DynamoDBAttribute
	public List<AuctionTeam> getAuctionTeams() {
		return auctionTeams;
	}

	@DynamoDBAttribute
	public String getDraftTurn() {
		return draftTurn;
	}

	@DynamoDBAttribute
	public String getDraftRound() {
		return draftRound;
	}

	@DynamoDBAttribute
	public String getStatus() {
		return this.status;
	}

	@DynamoDBAttribute
	public String getLeagueType() {
		return this.leagueType;
	}

	@DynamoDBAttribute
	public String getCurrentBid() {
		return this.currentBid;
	}

	@DynamoDBAttribute
	public String getCurrentBidder() {
		return this.currentBidder;
	}
	
	public AuctionTeam getTeam(String teamName) {
		for (AuctionTeam team : this.auctionTeams) {
			if (team.getTeamName().equals(teamName)) {
				return team;
			}
		}
		return null;
	}

	// Setters

	public void addAuctionTeam(AuctionTeam auctionTeams) {
		this.auctionTeams.add(auctionTeams);
	}

	public void setCurrentPlayer(String currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public void setLeagueId(String leagueId) {
		this.leagueId = leagueId;
	}

	public void setCurrentBid(String currentBid) {
		this.currentBid = currentBid;
	}

	public void setCurrentBidder(String currentBidder) {
		this.currentBidder = currentBidder;
	}

	public void setDraftTurn(String draftTurn) {
		this.draftTurn = draftTurn;
	}

	public void setAuctionTeams(List<AuctionTeam> auctionTeams) {
		this.auctionTeams = auctionTeams;
	}

	public void setLeagueName(String leagueName) {
		this.leagueName = leagueName;
	}

	public void setDraftRound(String draftRound) {
		this.draftRound = draftRound;
	}

	public void setPpr(String ppr) {
		this.ppr = ppr;
	}

	public void setLeagueType(String leagueType) {
		this.leagueType = leagueType;
	}

	public void setTotalBudget(String totalBudget) {
		this.totalBudget = totalBudget;
	}

	public void setMaxPlayers(String maxPlayers) {
		this.maxPlayers = maxPlayers;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ppr == null) ? 0 : ppr.hashCode());
		result = prime * result + ((auctionTeams == null) ? 0 : auctionTeams.hashCode());
		result = prime * result + ((currentBid == null) ? 0 : currentBid.hashCode());
		result = prime * result + ((currentBidder == null) ? 0 : currentBidder.hashCode());
		result = prime * result + ((currentPlayer == null) ? 0 : currentPlayer.hashCode());
		result = prime * result + ((currentPlayerPosition == null) ? 0 : currentPlayerPosition.hashCode());
		result = prime * result + ((currentPlayerTeam == null) ? 0 : currentPlayerTeam.hashCode());
		result = prime * result + ((draftRound == null) ? 0 : draftRound.hashCode());
		result = prime * result + ((draftTurn == null) ? 0 : draftTurn.hashCode());
		result = prime * result + ((leagueId == null) ? 0 : leagueId.hashCode());
		result = prime * result + ((leagueName == null) ? 0 : leagueName.hashCode());
		result = prime * result + ((leagueType == null) ? 0 : leagueType.hashCode());
		result = prime * result + ((maxPlayers == null) ? 0 : maxPlayers.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((totalBudget == null) ? 0 : totalBudget.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!(obj instanceof AuctionLeague))
			return false;
		AuctionLeague other = (AuctionLeague) obj;
		if (ppr == null) {
			if (other.ppr != null)
				return false;
		} else if (!ppr.equals(other.ppr))
			return false;
		if (auctionTeams == null) {
			if (other.auctionTeams != null)
				return false;
		} else if (!auctionTeams.equals(other.auctionTeams))
			return false;
		if (currentBid == null) {
			if (other.currentBid != null)
				return false;
		} else if (!currentBid.equals(other.currentBid))
			return false;
		if (currentBidder == null) {
			if (other.currentBidder != null)
				return false;
		} else if (!currentBidder.equals(other.currentBidder))
			return false;
		if (currentPlayer == null) {
			if (other.currentPlayer != null)
				return false;
		} else if (!currentPlayer.equals(other.currentPlayer))
			return false;
		if (currentPlayerPosition == null) {
			if (other.currentPlayerPosition != null)
				return false;
		} else if (!currentPlayerPosition.equals(other.currentPlayerPosition))
			return false;
		if (currentPlayerTeam == null) {
			if (other.currentPlayerTeam != null)
				return false;
		} else if (!currentPlayerTeam.equals(other.currentPlayerTeam))
			return false;
		if (draftRound == null) {
			if (other.draftRound != null)
				return false;
		} else if (!draftRound.equals(other.draftRound))
			return false;
		if (draftTurn == null) {
			if (other.draftTurn != null)
				return false;
		} else if (!draftTurn.equals(other.draftTurn))
			return false;
		if (leagueId == null) {
			if (other.leagueId != null)
				return false;
		} else if (!leagueId.equals(other.leagueId))
			return false;
		if (leagueName == null) {
			if (other.leagueName != null)
				return false;
		} else if (!leagueName.equals(other.leagueName))
			return false;
		if (leagueType == null) {
			if (other.leagueType != null)
				return false;
		} else if (!leagueType.equals(other.leagueType))
			return false;
		if (maxPlayers == null) {
			if (other.maxPlayers != null)
				return false;
		} else if (!maxPlayers.equals(other.maxPlayers))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (totalBudget == null) {
			if (other.totalBudget != null)
				return false;
		} else if (!totalBudget.equals(other.totalBudget))
			return false;
		return true;
	}
	
}